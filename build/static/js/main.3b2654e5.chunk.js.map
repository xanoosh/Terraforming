{"version":3,"sources":["components/User.js","components/UserList.js","components/App.js","reportWebVitals.js","index.js"],"names":["User","id","fullName","age","img","remove","className","onClick","src","alt","UserList","list","usersList","map","user","login","uuid","name","title","first","last","dob","picture","large","App","useState","users","setUsers","fetch","then","response","ok","Error","message","json","result","prev","results","console","log","catch","error","length","newList","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAgBeA,EAhBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,IAAKC,EAA3B,EAA2BA,OAA3B,OACX,qBAAKC,UAAU,wBAAf,SACE,sBAAKA,UAAU,cAAf,UACE,qBACEA,UAAU,SACVC,QAAS,WACPF,EAAOJ,MAGX,qBAAKO,IAAKJ,EAAKK,IAAG,UAAKP,KACvB,6BAAKA,IACL,sCAASC,WCKAO,EAdE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMN,EAAa,EAAbA,OAClBO,EAAYD,EAAKE,KAAI,SAACC,GAAD,OACzB,cAAC,EAAD,CACET,OAAQA,EAERJ,GAAIa,EAAKC,MAAMC,KACfd,SAAQ,UAAKY,EAAKG,KAAKC,MAAf,YAAwBJ,EAAKG,KAAKE,MAAlC,YAA2CL,EAAKG,KAAKG,MAC7DjB,IAAKW,EAAKO,IAAIlB,IACdC,IAAKU,EAAKQ,QAAQC,OAJbT,EAAKC,MAAMC,SAOpB,OAAO,mCAAGJ,KCyBGY,EAnCH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAuBhB,OACE,sBAAKrB,UAAU,QAAf,UACE,wBAAQC,QALQ,WAjBlBqB,MAkBQ,wCAjBLC,MAAK,SAACC,GACL,IAAKA,EAASC,GAAI,MAAMC,MAAMF,EAASG,SACvC,OAAOH,EAASI,UAEjBL,MAAK,SAACM,GACLR,GAAS,SAACS,GAAD,4BAAcA,GAAd,CAAoBD,EAAOE,QAAQ,QAC5CC,QAAQC,IAAIJ,MAEbK,OAAM,SAACC,GACNH,QAAQC,IAAIE,OAYd,gCACCf,EAAMgB,OAAS,EACd,cAAC,EAAD,CAAU/B,KAAMe,EAAOrB,OAXV,SAACJ,GAClB,IAAM0C,EAAU,YAAIjB,GAAOkB,QAAO,SAAC9B,GAAD,OAAUA,EAAKC,MAAMC,OAASf,KAChE0B,EAASgB,MAWL,mBAAGrC,UAAU,cAAb,qCCpBOuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3b2654e5.chunk.js","sourcesContent":["const User = ({ id, fullName, age, img, remove }) => (\r\n  <div className=\"single-user-container\">\r\n    <div className=\"single-user\">\r\n      <div\r\n        className=\"remove\"\r\n        onClick={() => {\r\n          remove(id);\r\n        }}\r\n      ></div>\r\n      <img src={img} alt={`${fullName}`} />\r\n      <h3>{fullName}</h3>\r\n      <p>age: {age}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default User;\r\n","import User from './User';\r\n\r\nconst UserList = ({ list, remove }) => {\r\n  const usersList = list.map((user) => (\r\n    <User\r\n      remove={remove}\r\n      key={user.login.uuid}\r\n      id={user.login.uuid}\r\n      fullName={`${user.name.title} ${user.name.first} ${user.name.last}`}\r\n      age={user.dob.age}\r\n      img={user.picture.large}\r\n    />\r\n  ));\r\n  return <>{usersList}</>;\r\n};\r\n\r\nexport default UserList;\r\n","import { useState } from 'react';\nimport './App.css';\nimport UserList from './UserList';\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const callApi = (url) => {\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) throw Error(response.message);\n        return response.json();\n      })\n      .then((result) => {\n        setUsers((prev) => [...prev, result.results[0]]);\n        console.log(result);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  const removeUser = (id) => {\n    const newList = [...users].filter((user) => user.login.uuid !== id);\n    setUsers(newList);\n  };\n  const handleClick = () => {\n    callApi('https://randomuser.me/api/?results=1');\n  };\n  return (\n    <div className=\"users\">\n      <button onClick={handleClick}>Create random user</button>\n      {users.length > 0 ? (\n        <UserList list={users} remove={removeUser} />\n      ) : (\n        <p className=\"placeholder\">No user created yet</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}